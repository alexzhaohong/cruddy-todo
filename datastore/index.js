const fs = require('fs');
const path = require('path');
const _ = require('underscore');
const counter = require('./counter');

var items = {};

// Public API - Fix these CRUD functions ///////////////////////////////////////

exports.create = (text, callback) => {
  // fs.writeFile --> to create file
  // getNextUniqueId (exports.dataDir, data, callback)


  // The next step is to start saving new todos on the hard drive by refactoring create.   to

  // todos.create('todo2', (err, data) => {expect(fs.readdirSync(todos.dataDir)).to.have.lengthOf(2);});

  //   Each new todo entry must be saved in its own file.
  //   Use the unique id generated by getNextUniqueId
  //   create a file path inside the dataDir.
  //   Each time a POST request is made to the collection route, save a file with the todo item in this folder.
  //   Only save the todo text in the file, the id of the todo item is encoded into its filename -- DO NOT STORE AN OBJECT.


  //   fs.writeFiles(exports.dataDir, )

  // 1. Get getNextUniqueId
  // 2. Create a new filepath with that fs.writeFiles
  // 3. Put 'text' in that. (when POST request is made to the collection route)
  // 4.  Callback function
  //   callback(null, { id, text });


  counter.getNextUniqueId( (err, dataId) => {
    var dataDirUnique = path.join(exports.dataDir, `${dataId}.txt`);
    var dataDirUnique2 = exports.dataDir.concat(`${dataId}.txt`);
    console.log('first check: ' + dataDirUnique);
    console.log('first check: ' + dataDirUnique2);
    console.log('second check: ' + err);
    console.log('third check: ' + dataId);
    console.log('fourth check: ' + text);

    fs.writeFiles(exports.dataDir, text, (err) => {
      if (err) {
        console.log('error writing counter');
        console.log(err);
      } else {
        console.log('fifth check: ' + dataId);
        console.log(text);
        callback(null, {id: dataId, text: text});
      }
    });
  });



  // getNextUniqueId(callback)
  // fs.writeFiles(exports.dataDir, todoentryString, callback) write to dataDir (string)

  // ORIGINAL VERSION
  // var id = counter.getNextUniqueId();
  // items[id] = text;
  // callback(null, { id, text });
};

exports.readAll = (callback) => {
  var data = _.map(items, (text, id) => {
    return { id, text };
  });
  callback(null, data);
};

exports.readOne = (id, callback) => {
  var text = items[id];
  if (!text) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback(null, { id, text });
  }
};

exports.update = (id, text, callback) => {
  var item = items[id];
  if (!item) {
    callback(new Error(`No item with id: ${id}`));
  } else {
    items[id] = text;
    callback(null, { id, text });
  }
};

exports.delete = (id, callback) => {
  var item = items[id];
  delete items[id];
  if (!item) {
    // report an error if item not found
    callback(new Error(`No item with id: ${id}`));
  } else {
    callback();
  }
};

// Config+Initialization code -- DO NOT MODIFY /////////////////////////////////

exports.dataDir = path.join(__dirname, 'data');

exports.initialize = () => {
  if (!fs.existsSync(exports.dataDir)) {
    fs.mkdirSync(exports.dataDir);
  }
};
